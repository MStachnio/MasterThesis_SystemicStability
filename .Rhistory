external_Trade = matrix(System_Q * daily_market_volume, nrow = m_Assets, ncol = 1)
external_Trade = NamingRows("asset", external_Trade, 1)
} else {
external_Trade = 0
}
if (length(decision_Volume_Traded) > m_Assets) {
totalTrade = rowSums(decision_Volume_Traded)
} else {
totalTrade = decision_Volume_Traded
}
net_Volume_Traded = totalTrade + net_Volume_Traded + external_Trade
if (System_Update_Dummy == 1) {
assign("net_Volume_Traded", net_Volume_Traded, envir = .GlobalEnv)
}
p_t1 = p_0 * exp(liquidity_factor * net_Volume_Traded/System_Q)
return(p_t1)
}
# Liquidation Schedules ------------------------------------------------------------
Lagrangian_Approach2 = function(x, i, q_t, p_0, liquidity_factor, net_Volume_Traded,
m_Assets, System_Q, delta_asset, external_Trade_Dummy) {
decision_Volume_Traded = x
LagrangianValue = colSums(q_t[i, ] * (p_t - p_0 * exp(liquidity_factor * (decision_Volume_Traded + net_Volume_Traded)/System_Q)))
if (- colSums(decision_Volume_Traded * p_t) - delta_asset[i] < 0) {
LagrangianValue = 9999999999999999999
}
if (max(decision_Volume_Traded) > 0) {
LagrangianValue = 9999999999999999999
}
for (j in 1:m_Assets) {
if (q_t[i, j] + decision_Volume_Traded[j] < 0 ) {
LagrangianValue = 9999999999999999999
}
}
return(LagrangianValue)
}
Lagrangian_Approach3 = function(decision_Volume_Traded, q_t, p_0, liquidity_factor, net_Volume_Traded,
m_Assets, System_Q, delta_asset, external_Trade_Dummy) {
decision_Volume_Traded = matrix(data = decision_Volume_Traded, nrow = (length(decision_Volume_Traded)/m_Assets), ncol = m_Assets)
totalTrade = matrix(data = 0, nrow = 1, ncol = m_Assets)
for (i in 1:(length(decision_Volume_Traded[, 1]))) {
totalTrade = totalTrade + decision_Volume_Traded[i, ]
}
LagrangianValue = colSums(q_t %*% (p_t - p_0 * exp(liquidity_factor * (t(totalTrade) + net_Volume_Traded)/System_Q)))
# Constraint 1: At least monetary value delta_asset is liquidated
if (min(-(decision_Volume_Traded %*% p_t) - delta_asset) < 0) {
LagrangianValue = 9999999999999999999
}
# Constraint 2: No buying of assets
if (max(decision_Volume_Traded) > 0) {
LagrangianValue = 9999999999999999999
}
# Constraint 3: Banks cannot sell more than they hold
if (min(q_t + decision_Volume_Traded) < 0 ) {
LagrangianValue = 9999999999999999999
}
return(LagrangianValue)
}
# System actualisation rules --------------------------------------------------------------
System_Update = function(method_selection, gamma, asset_t, equity_t, target_Leverage, q_t, p_t, n_Banks, m_Assets, liquidity_factor, p_0,
balanceSheet, external_Trade_Dummy) {
# 2) Defines the liquidation schedule
# Approach 1: Pro-Rata Liquidation            -----------
if (method_selection == 1) {
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol = n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
q_copy = q_t
# Liquidation Quantity - Calculates delta_asset
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
bank_index_array = 1:n_Banks
for (i in 1:n_Banks) {
# bankruptcy check
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
decision_Volume_Traded[, i] = -t(q_t[i, ])
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
for (i in bank_index_array) {
leftover_delta_asset = delta_asset[i]
# counts how many assets are held by each bank
count_Asset_Held = length(which(q_t[i, ] > 0))
# If it needs to liquidate:
if (delta_asset[i] != 0) {
# per asset monetary volume it needs to liquidate
per_Asset_Liquidation_Quantity = delta_asset[i] / count_Asset_Held
repeat{
test = 0
for (j in which(q_copy[i, ] > 0)) {
# If a bank does not have enough of one asset to liquidate on a pro-rata basis,
# it liquidates all it has and then adapts how much it liquidates of other assets.
if (q_t[i, j] * p_t[j] < per_Asset_Liquidation_Quantity) {
# all the position in the asset is liquidated
decision_Volume_Traded[j, i] = - q_t[i, j]
q_copy[i, j] = 0
# The monetary value to be liquidated decreases
leftover_delta_asset = delta_asset[i] + rowSums(t(decision_Volume_Traded[, i] %*% p_t))
# Adapts the per_Asset_Liquidation_Quantity to new quantity/ liquidation value
count_Asset_Held = count_Asset_Held - 1
per_Asset_Liquidation_Quantity = leftover_delta_asset / count_Asset_Held
} else {
test = test + 1
}
}
if (test == length(which(q_copy[i,] > 0))) {
break
}
}
}
# If there are some assets for which the bank can fully liquidate, it liquidates equal amounts:
if (count_Asset_Held > 0) {
# Identifies the index of the assets where the bank still holds a position:
assign_Vector = which((q_copy[i, ] + decision_Volume_Traded[, i]) > 0)
for (q in assign_Vector) {
decision_Volume_Traded[assign_Vector, i] = -leftover_delta_asset / count_Asset_Held
}
}
}
}
# Approach 2: Bank Holding Liqudiation        -----------
else if (method_selection == 2) {
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol = n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
decision_Volume_Traded[, i] = -t(q_t[i, ])
# if not bankrupt
} else if (delta_asset[i] == 0) {
decision_Volume_Traded[, i] = matrix(data = 0, ncol = m_Assets, nrow = 1)
} else {
parameter_initial_values = matrix(-0.1 * q_t[i,], nrow = m_Assets, ncol = 1)
OptimalValues = optim(parameter_initial_values, Lagrangian_Approach2,
i = i, q_t = q_t, p_0 = p_0, liquidity_factor = liquidity_factor, net_Volume_Traded = net_Volume_Traded,
m_Assets = m_Assets, System_Q = System_Q, delta_asset = delta_asset, external_Trade_Dummy = external_Trade_Dummy)
decision_Volume_Traded[, i] = OptimalValues$par
}
}
}
# Approach 3: Perfect Information Liquidation -----------
else {
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_no_liquidation_array[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bankrupt_bank_array = initial_bank_index_array[!initial_bank_index_array %in% bank_index_array]
bankruptcy_Liquidation_Volume = matrix(q_t[bankrupt_bank_array, ], nrow = length(bankrupt_bank_array), ncol = m_Assets)
bank_no_liquidation_array = bank_index_array[!initial_bank_index_array %in% bank_no_liquidation_array]
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
if (length(bank_index_array) > 0 ) {
parameter_initial_values = matrix(-0.1 * q_t[bank_index_array, ], nrow = m_Assets * length(bank_index_array), ncol = 1)
OptimalValues = optim(parameter_initial_values, Lagrangian_Approach3, q_t = q_t[bank_index_array, ], p_0 = p_0, liquidity_factor = liquidity_factor, net_Volume_Traded = (net_Volume_Traded + colSums(bankruptcy_Liquidation_Volume)),
m_Assets = m_Assets, System_Q = System_Q, delta_asset = delta_asset[bank_index_array], external_Trade_Dummy = external_Trade_Dummy)
}
decision_Volume_Traded[ , bank_index_array] = t(matrix(data = OptimalValues$par, nrow = (length(OptimalValues$par)/m_Assets), ncol = m_Assets))
decision_Volume_Traded[ , bankrupt_bank_array] = -t(bankruptcy_Liquidation_Volume)
decision_Volume_Traded[ , bank_no_liquidation_array] = t(no_Liquidation_Volume)
}
# 3) Calculate the price impact of decision_Volume_Traded
p_t = Price_Impact(decision_Volume_Traded, liquidity_factor, m_Assets, p_0, System_Q, daily_market_volume,
net_Volume_Traded, external_Trade_Dummy, System_Update_Dummy = 1)
# 4) Settle the cash of the trade
balanceSheet[, 2] = balanceSheet[, 2] - t(t(p_t) %*% decision_Volume_Traded)
# 5) Reduce the quantities of holdings of banks
q_t = q_t + t(decision_Volume_Traded)
# 6) reupdate the asset values
balanceSheet[, 1] = q_t %*% p_t
# 7) Calculate the equity
balanceSheet[, 4] = balanceSheet[, 1] + balanceSheet[, 2] - balanceSheet[, 3]
# The funciton should return: the prices, the balance sheets, the quantities,
return(list("balanceSheet" = balanceSheet, "Quantities" = q_t, "Prices" = p_t, "decision_Volume_Traded" = decision_Volume_Traded))
}
# On top of this:
# - monitoring of the bankruptcy rate, the delta asset sold, the total equity of the sstem
# - do a loop that stops once there are no more bankruptcies
# - make a loop so that it does multiple simulations and collects aggregate data on the simulations
# -
# Execution Code ------------------------------------------------------------
# PART 1: Setting up the system
# Plots the graph, changes the color of the vertexes depending on the type
graph1 = Generategraph(n_Banks, m_Assets, linkProbabiliy)
plot(graph1, vertex.color=c("orange", "green")[1 + (V(graph1)$type == "TRUE")],
vertex.size = 5, vertex.label = NA)
plot(graph1, vertex.color=c("orange", "green")[1 + (V(graph1)$type == "TRUE")],
vertex.size = 5, vertex.label = NA)
# Create the k_i vector that has the degrees of each bank
k_i = matrix(data = NA, ncol = 1, nrow = n_Banks)
for (i in 1:n_Banks) {
k_i[i] = sum(graph1[i])
}
k_i = NamingRows("bank", k_i, 1)
# Create the l_j vector that has the degrees of each asset
l_j = matrix(data = NA, ncol = 1, nrow = m_Assets)
for (j in 1:m_Assets) {
l_j[j] = sum(graph1[j+n_Banks])
}
l_j = NamingRows("asset", l_j, 1)
balanceSheet = matrix(data = NA, nrow = n_Banks, ncol = 4)
colnames(balanceSheet) = c("Assets", "Cash", "Liabilities", "Equity")
balanceSheet = NamingRows("bank", balanceSheet, 1)
balanceSheet[ ,1] = asset_0
balanceSheet[ ,2] = cash_0
balanceSheet[ ,3] = liabilities_0
equity_0 = asset_0 + cash_0 - liabilities_0
balanceSheet[ ,4] = equity_0
# defining the initial price of assets:
p_0 = matrix(data = intial_Price, nrow = m_Assets, ncol = 1)
p_0 = NamingRows("asset", p_0, 1)
# The matrix of asset quantities owned
q_0 = matrix(data = 0, nrow = n_Banks, ncol = m_Assets )
q_0 = NamingRows("bank", q_0, 1)
q_0 = NamingCols("asset", q_0, 1)
# Assigns the initial quantities owned by each bank of all assets
for (i in 1:n_Banks) {
for (j in 1:m_Assets) {
if (graph1[i, j+ n_Banks] == 1) {
q_0[i, j] = balanceSheet[ i,1] / (k_i[i] * p_0[j])
}
}
}
System_Q = rowSums(t(q_0))
# Defining the termporal variables:
q_t = q_0
p_t = p_0
k_t = k_i
balanceSheet[, 1] = asset_0
equity_t = balanceSheet[, 4]
target_Leverage = asset_0 / balanceSheet[, 4] # Setting the target leverage at the initial leverage level
net_Volume_Traded = matrix(0, nrow = m_Assets, ncol = 1)
# Part 2: Doing the simulation
# Shocking the system via price reduction
assetChoice = sample(assetChoiceVector, 1)
p_t[assetChoice] = (1 - assetReduction) * p_t[assetChoice]
p_0 = p_t
# Updating asset values
balanceSheet[, 1] = q_t %*% p_t
# Updating equity values
balanceSheet[, 4] = balanceSheet[, 1] + balanceSheet[, 2] - balanceSheet[, 3]
asset_evolution = matrix(0, nrow = numberIterations, ncol =1)
prices_evolution = matrix(0, nrow = numberIterations, ncol = m_Assets)
decision_Volume = array(data = NA, dim = c(n_Banks, m_Assets, numberIterations))
# Simulating one system
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_no_liquidation_array[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bankrupt_bank_array = initial_bank_index_array[!initial_bank_index_array %in% bank_index_array]
bankruptcy_Liquidation_Volume = matrix(q_t[bankrupt_bank_array, ], nrow = length(bankrupt_bank_array), ncol = m_Assets)
bank_no_liquidation_array = bank_index_array[!initial_bank_index_array %in% bank_no_liquidation_array]
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
if (length(bank_index_array) > 0 ) {
parameter_initial_values = matrix(-0.1 * q_t[bank_index_array, ], nrow = m_Assets * length(bank_index_array), ncol = 1)
OptimalValues = optim(parameter_initial_values, Lagrangian_Approach3, q_t = q_t[bank_index_array, ], p_0 = p_0, liquidity_factor = liquidity_factor, net_Volume_Traded = (net_Volume_Traded + colSums(bankruptcy_Liquidation_Volume)),
m_Assets = m_Assets, System_Q = System_Q, delta_asset = delta_asset[bank_index_array], external_Trade_Dummy = external_Trade_Dummy)
}
decision_Volume_Traded[ , bank_index_array] = t(matrix(data = OptimalValues$par, nrow = (length(OptimalValues$par)/m_Assets), ncol = m_Assets))
decision_Volume_Traded[ , bankrupt_bank_array] = -t(bankruptcy_Liquidation_Volume)
decision_Volume_Traded[ , bank_no_liquidation_array] = t(no_Liquidation_Volume)
bank_no_liquidation_array
bank_no_liquidation_array
bank_index_array
initial_bank_index_array
bank_no_liquidation_array
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_no_liquidation_array[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_no_liquidation_array
bank_no_liquidation_array = bank_index_array[!bank_index_array %in% i]
bank_no_liquidation_array
delta_asset
bank_no_liquidation_array = bank_index_array[!initial_bank_index_array %in% bank_no_liquidation_array]
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
no_Liquidation_Volume
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bankrupt_bank_array = initial_bank_index_array[!initial_bank_index_array %in% bank_index_array]
bankruptcy_Liquidation_Volume = matrix(q_t[bankrupt_bank_array, ], nrow = length(bankrupt_bank_array), ncol = m_Assets)
bank_no_liquidation_array = bank_index_array[!initial_bank_index_array %in% bank_no_liquidation_array]
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
if (length(bank_index_array) > 0 ) {
parameter_initial_values = matrix(-0.1 * q_t[bank_index_array, ], nrow = m_Assets * length(bank_index_array), ncol = 1)
OptimalValues = optim(parameter_initial_values, Lagrangian_Approach3, q_t = q_t[bank_index_array, ], p_0 = p_0, liquidity_factor = liquidity_factor, net_Volume_Traded = (net_Volume_Traded + colSums(bankruptcy_Liquidation_Volume)),
m_Assets = m_Assets, System_Q = System_Q, delta_asset = delta_asset[bank_index_array], external_Trade_Dummy = external_Trade_Dummy)
}
decision_Volume_Traded[ , bank_index_array] = t(matrix(data = OptimalValues$par, nrow = (length(OptimalValues$par)/m_Assets), ncol = m_Assets))
decision_Volume_Traded[ , bankrupt_bank_array] = -t(bankruptcy_Liquidation_Volume)
decision_Volume_Traded[ , bank_no_liquidation_array] = t(no_Liquidation_Volume)
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bankrupt_bank_array = initial_bank_index_array[!initial_bank_index_array %in% bank_index_array]
bankruptcy_Liquidation_Volume = matrix(q_t[bankrupt_bank_array, ], nrow = length(bankrupt_bank_array), ncol = m_Assets)
bank_no_liquidation_array = bank_index_array[!initial_bank_index_array %in% bank_no_liquidation_array]
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
if (length(bank_index_array) > 0 ) {
parameter_initial_values = matrix(-0.1 * q_t[bank_index_array, ], nrow = m_Assets * length(bank_index_array), ncol = 1)
OptimalValues = optim(parameter_initial_values, Lagrangian_Approach3, q_t = q_t[bank_index_array, ], p_0 = p_0, liquidity_factor = liquidity_factor, net_Volume_Traded = (net_Volume_Traded + colSums(bankruptcy_Liquidation_Volume)),
m_Assets = m_Assets, System_Q = System_Q, delta_asset = delta_asset[bank_index_array], external_Trade_Dummy = external_Trade_Dummy)
}
decision_Volume_Traded[ , bank_index_array] = t(matrix(data = OptimalValues$par, nrow = (length(OptimalValues$par)/m_Assets), ncol = m_Assets))
decision_Volume_Traded[ , bankrupt_bank_array] = -t(bankruptcy_Liquidation_Volume)
decision_Volume_Traded[ , bank_no_liquidation_array] = t(no_Liquidation_Volume)
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_index_array
bank_no_liquidation_array
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_index_array_copy = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array_copy[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_no_liquidation_array
bank_index_array
balanceSheet
decision_Volume_Traded = matrix(0, nrow = m_Assets, ncol =  n_Banks)
decision_Volume_Traded = NamingRows("asset", decision_Volume_Traded, 1)
decision_Volume_Traded = NamingCols("bank", decision_Volume_Traded, 1)
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_index_array_copy = initial_bank_index_array
bank_index_array_copy2 = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_no_bankruptcy_array = bank_index_array_copy2[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array_copy[!bank_index_array %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_index_array
bank_no_liquidation_array
bank_no_bankruptcy_array
bank_no_bankruptcy_array = bank_index_array_copy2[!bank_index_array %in% i]
bank_no_bankruptcy_array
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_index_array_copy = initial_bank_index_array
bank_index_array_copy2 = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_no_bankruptcy_array = bank_index_array_copy2[!bank_index_array_copy2 %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array_copy[!bank_index_array_copy %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_no_bankruptcy_array
bank_index_array
bank_no_liquidation_array
bank_index_array
bankrupt_bank_array = initial_bank_index_array[!initial_bank_index_array %in% bank_index_array]
bankruptcy_Liquidation_Volume = matrix(q_t[bankrupt_bank_array, ], nrow = length(bankrupt_bank_array), ncol = m_Assets)
bankruptcy_Liquidation_Volume
bank_no_liquidation_array = bank_index_array[!initial_bank_index_array %in% bank_no_liquidation_array]
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
no_Liquidation_Volume
bank_no_liquidation_array
no_Liquidation_Volume
no_Liquidation_Volume = matrix(0, nrow = length(bank_no_liquidation_array), ncol = m_Assets)
no_Liquidation_Volume
length(bank_no_liquidation_array)
bank_no_liquidation_array = bank_index_array_copy[!bank_index_array_copy %in% i]
bank_no_liquidation_array
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_index_array_copy = initial_bank_index_array
bank_index_array_copy2 = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_no_bankruptcy_array = bank_index_array_copy2[!bank_index_array_copy2 %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_index_array_copy[!bank_index_array_copy %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_index_array
bank_no_liquidation_array
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_no_bankruptcy_array = bank_index_array_copy2[!bank_index_array_copy2 %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_no_liquidation_array[!bank_index_array_copy %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_no_liquidation_array
initial_bank_index_array = 1:n_Banks
bank_index_array = initial_bank_index_array
bank_index_array_copy = initial_bank_index_array
bank_index_array_copy2 = initial_bank_index_array
bank_no_liquidation_array = initial_bank_index_array
# Liquidation quantity
delta_asset = Cont_Delta_Asset(n_Banks, balanceSheet, gamma, target_Leverage, leverage_warning_factor)
for (i in 1:n_Banks) {
# Liquidate everything if bankrupt
if (balanceSheet[i, 1] + balanceSheet[i, 2] - balanceSheet[i, 3] < 0 ) {
bank_no_bankruptcy_array = bank_index_array_copy2[!bank_index_array_copy2 %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
} else if (delta_asset[i] == 0) {
bank_no_liquidation_array = bank_no_liquidation_array[!bank_index_array_copy %in% i]
bank_index_array = bank_index_array[!bank_index_array %in% i]
}
}
bank_no_liquidation_array
