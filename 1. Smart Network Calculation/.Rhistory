getSymbols(tickers, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
getSymbols(tickers, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)$paste(tickers, ".Close")
getSymbols(tickers, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = getSymbols(tickers, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data$AAPL.Close
data$paste(tickers, ".Close")
paste(tickers, ".Close")
paste(tickers,".Close")
data$paste(tickers,".Close", sep="")
paste(tickers,".Close", sep="")
data
data[,4]
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
ticker = c("AAPL")
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data
data2 = getSymbols(TSLA, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data2 = getSymbols("TSLA", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data2 = data2[,4]
data2
rbind(data, data2)
data
data2
rbind(data, data2)
merge(data, data2)
data = 0
tickerList = c("AAPL", "TSLA")
data = 0
data_total
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = merge(data_total, data)
}
tickerList = c("TSLA", "MSFT")
data = 0
data_total =data = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = merge(data_total, data)
}
data_total
tickerList = c("TSLA", "MSFT")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
data_total
sp500 = GetSP500Stocks()
sp500
tickerList = c(AAPL
ABBV	AbbVie Inc.
ABT	Abbott Laboratories
ACN	Accenture
ADBE	Adobe Inc.
AGN	Allergan
AIG	American International Group
ALL	Allstate
AMGN	Amgen Inc.
AMZN	Amazon.com
AXP	American Express
BA	Boeing Co.
BAC	Bank of America Corp
BIIB	Biogen
BK	The Bank of New York Mellon
BKNG	Booking Holdings
BLK	BlackRock Inc
BMY	Bristol-Myers Squibb
BRK.B	Berkshire Hathaway
C	Citigroup Inc
CAT	Caterpillar Inc.
CELG	Celgene Corp
CHTR	Charter Communications
CL	Colgate-Palmolive
CMCSA	Comcast Corp.
COF	Capital One Financial Corp.
COP	ConocoPhillips
COST	Costco Wholesale Corp.
CSCO	Cisco Systems
CVS	CVS Health
CVX	Chevron Corporation
DHR	Danaher Corporation
DIS	The Walt Disney Company
DUK	Duke Energy
DOW	Dow Inc.
DWDP	DowDuPont
EMR	Emerson Electric Co.
EXC	Exelon
F	Ford Motor Company
FB	Facebook
FDX	FedEx
GD	General Dynamics
GE	General Electric
GILD	Gilead Sciences
GM	General Motors
GOOG	Alphabet Inc. C
GOOGL	Alphabet Inc. A
GS	Goldman Sachs
HD	Home Depot
HON	Honeywell
IBM	International Business Machines
INTC	Intel Corp.
JNJ	Johnson & Johnson
JPM	JPMorgan Chase & Co.
KHC	Kraft Heinz
KMI	Kinder Morgan
KO	The Coca-Cola Company
LLY	Eli Lilly and Company
LMT	Lockheed Martin
LOW	Lowe's
MA	MasterCard Inc
MCD	McDonald's Corp
MDLZ	MondelÄ“z International
MDT	Medtronic plc
MET	MetLife Inc.
MMM	3M Company
MO	Altria Group
MRK	Merck & Co.
MS	Morgan Stanley
MSFT	Microsoft
NEE	NextEra Energy
NFLX	Netflix
NKE	Nike, Inc.
NVDA	NVIDIA Corp.
ORCL	Oracle Corporation
OXY	Occidental Petroleum Corp.
PEP	PepsiCo
PFE	Pfizer Inc
PG	Procter & Gamble Co
PM	Philip Morris International
PYPL	PayPal Holdings
QCOM	Qualcomm Inc.
RTN	Raytheon Co.
SBUX	Starbucks Corp.
SLB	Schlumberger
SO	Southern Company
SPG	Simon Property Group, Inc.
T	AT&T Inc
TGT	Target Corporation
TXN	Texas Instruments
UNH	UnitedHealth Group
UNP	Union Pacific Corporation
UPS	United Parcel Service
USB	U.S. Bancorp
UTX	United Technologies
V	Visa Inc.
VZ	Verizon Communications
WBA	Walgreens Boots Alliance
WFC	Wells Fargo
WMT	Walmart
XOM)
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK.B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DOW", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
data_total
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK-B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DOW", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK-B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK-B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
data_total
write.table(data_total,file="S&P100",append=TRUE,sep=",",
quote=FALSE,row.names=FALSE,col.names=FALSE)
write.table(data_total,file="S&P100.csv",append=TRUE,sep=",",
quote=FALSE,row.names=FALSE,col.names=FALSE)
is.na(data_total)
data_total[is.na(data_total)]
data_total[>0(data_total)]
data_total[data_total <0]
data_total
write.table(data_total,file="S&P100.csv",append=TRUE,sep=",",
quote=FALSE,row.names=TRUE,col.names=TRUE)
write.table(data_total,file="S&P100.csv",append=TRUE,sep=",",
quote=FALSE,row.names=TRUE,col.names=TRUE)
library(quantmod)
library(BatchGetSymbols)
# Tickers as of March 2019
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK-B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
library(quantmod)
library(BatchGetSymbols)
# Tickers as of March 2019
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK-B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
write.table(data_total,file="S&P100.csv",append=TRUE,sep=",",
quote=FALSE,row.names=TRUE,col.names=TRUE)
write.table(data_total,file="S&P100.csv",append=FALSE,sep=",",
quote=FALSE,row.names=TRUE,col.names=TRUE)
write.table(data_total,file="S&P100.csv",append=FALSE,sep=",",
quote=TRUE,row.names=TRUE,col.names=TRUE)
data_total
row.names(data_total)
data_total
data_total[1,1]
x = read.csv("S&P100.csv")
x
write.table(data_total,file="S&P100.csv",append=TRUE,sep=",",
quote=TRUE,row.names=TRUE,col.names=TRUE)
x = read.csv("S&P100.csv")
write.table(data_total,file="S&P100.csv",append=FALSE,sep=",",
quote=TRUE,row.names=TRUE,col.names=TRUE)
x = read.csv("S&P100.csv")
x
data_total
x = read.csv("S&P100.csv")
read.table(file = "S&P100.csv", row.names = 1)
x = read.csv("S&P100.csv")
x
SP100_weekly = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_weekly
SP100_weekly
install.packages("PortfolioAnal")
install.packages("PortfolioAnalytics")
library(PortfolioAnalytics)
CalculateReturns(SP100_weekly)
SP100_weekly
length(SP100_weekly[,1]
)
SP100_returns_weekly[2:length(SP100_weekly[,1])]
SP100_weekly[2:length(SP100_weekly[,1])]
SP100_weekly[2:length(SP100_weekly[,1],)]
SP100_weekly[2:length(SP100_weekly[,1]),]
SP100_weekly[2:length(SP100_weekly[,1]),] -  SP100_weekly[1:(length(SP100_weekly[,1])-1),]
SP100_weekly
SP100_returns_weekly = (SP100_weekly[2:length(SP100_weekly[,1]),] -  SP100_weekly[1:(length(SP100_weekly[,1])-1),])/SP100_weekly[1:(length(SP100_weekly[,1])-1),]
SP100_returns_weekly
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
SP100_returns_daily
cov(SP100_returns_daily)
SP100_cov_daily = cov(SP100_returns_daily)
SP100_cov_daily
asset_names = colnames(SP100_returns_daily)
asset_names
pspec = portfolio.spec(assets = asset_names)
pspec
pspec$assets
pspec = add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec
rnorm(10, mean= 3, sd = 3)
rnorm(10, mean= 3, sd = 1.5)
Target_return = rnorm(10, mean= 3, sd = 1.5)
Target_return
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec
install.packages("PortfolioAnalytics")
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
SP100_cov_daily = cov(SP100_returns_daily)
asset_names = colnames(SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
install.packages("PortfolioAnalytics")
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
SP100_cov_daily = cov(SP100_returns_daily)
asset_names = colnames(SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec
pspec <- add.objective(pspec, type="risk", name="StdDev")
pspec
pspec
rp1 <- random_portfolios(portfolio=pspec, permutations=5000,
+ rp_method='sample')
rp1 <- random_portfolios(portfolio=pspec, permutations=5000, rp_method='sample')
rp1
SP100_returns_daily
sample(10, 100, replace = FALSE)
sample(100, 10, replace = FALSE)
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
sample_SP100_returns_daily
sample_SP100_returns_daily
asset_names = colnames(sample_SP100_returns_daily)
asset_names
library(PortfolioAnalytics)
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec <- add.objective(pspec, type="risk", name="StdDev")
rp1 <- random_portfolios(portfolio=pspec, permutations=5000, rp_method='sample')
rp1
Target_return
library(PortfolioAnalytics)
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec <- add.objective(pspec, type="risk", name="var")
rp1 <- random_portfolios(portfolio=pspec, permutations=5000, rp_method='sample')
pspec
pspec$assets
pspec <- random_portfolios(portfolio=pspec, permutations=5000, rp_method='sample')
pspec
library(PortfolioAnalytics)
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec <- add.objective(pspec, type="risk", name="var")
rp1 <- random_portfolios(portfolio=pspec, permutations=5000, rp_method='sample')
opt_minvar = optimize-portfolio(R = R,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
library(DEoptim)
library(ROI)
install.packages("DEoptim")
install.packages("ROI")
library(PortfolioAnalytics)
library(DEoptim)
library(ROI)
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec <- add.objective(pspec, type="risk", name="var")
opt_minvar = optimize-portfolio(R = R,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec <- add.objective(pspec, type="risk", name="var")
opt_minvar = optimize-portfolio(R = R,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
opt_minvar = optimize.portfolio(R = R,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
opt_minvar = optimize.portfolio(sample_SP100_returns_daily,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_daily
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
library(quantmod)
library(BatchGetSymbols)
# Tickers as of March 2019
tickerList = c("ABBV","ABT", "ACN", "ADBE", "AGN", "AIG","ALL", "AMGN", "AMZN", "AXP", "BA", "BAC", "BIIB", "BK", "BKNG", "BLK", "BMY", "BRK-B", "C", "CAT", "CELG", "CHTR", "CL", "CMCSA", "COF", "COP", "COST", "CSCO", "CVS", "CVX", "DHR", "DIS", "DUK", "DWDP", "EMR", "EXC", "F", "FB", "FDX", "GD", "GE", "GILD", "GM", "GOOG", "GOOGL", "GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KHC", "KMI", "KO", "LLY", "LMT", "LOW", "MA", "MCD", "MDLZ", "MDT", "MET", "MMM", "MO", "MRK", "MS", "MSFT", "NEE", "NFLX", "NKE", "NVDA", "ORCL", "OXY", "PEP", "PFE", "PG", "PM", "PYPL", "QCOM", "RTN", "SBUX", "SLB", "SO", "SPG", "T", "TGT", "TXN", "UNH", "UNP", "UPS", "USB", "UTX", "V", "VZ", "WBA", "WFC", "WMT", "XOM")
data = 0
data_total = getSymbols("AAPL", auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data_total = data_total[,4]
for (ticker in tickerList) {
data = getSymbols(ticker, auto.assign = F, src="yahoo", from = "2018-01-01", to = "2018-12-31", silent = TRUE)
data = data[,4]
data_total = merge(data_total, data)
}
data_total
write.table(data_total,file="S&P100.csv",append=FALSE,sep=",", quote=TRUE,row.names=TRUE,col.names=TRUE)
write.table(data_total,file="S&P100.csv",append=FALSE,sep=",", quote=TRUE,row.names=TRUE,col.names=FALSE)
write.table(data_total,file="S&P100.csv",append=FALSE,sep=",", quote=TRUE,row.names=TRUE,col.names=TRUE)
as.data.frame(data_total)
write.table(as.data.frame(data_total),file="S&P100.csv",append=FALSE,sep=",", quote=TRUE,row.names=TRUE,col.names=TRUE)
SP100_daily = read.table("S&P100.csv" , header = TRUE, sep = ",", row.names = 1)
SP100_daily
SP100_returns_daily = (SP100_daily[2:length(SP100_daily[,1]),] -  SP100_daily[1:(length(SP100_daily[,1])-1),])/SP100_daily[1:(length(SP100_daily[,1])-1),]
sample_SP100_returns_daily = SP100_returns_daily[,sample(100, 10, replace = FALSE)]
SP100_cov_daily = cov(sample_SP100_returns_daily)
asset_names = colnames(sample_SP100_returns_daily)
pspec = portfolio.spec(assets = asset_names)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec <- add.constraint(portfolio=pspec, type="box", min_sum=0, max_sum=1)
# Possibility to add diversification target
# pspec <- add.constraint(portfolio=pspec, type="diversification", div_target=0.7)
Target_return = rnorm(10, mean= 3, sd = 1.5)
pspec <- add.constraint(portfolio=pspec, type="return", return_target = Target_return)
pspec <- add.objective(pspec, type="risk", name="var")
opt_minvar = optimize.portfolio(sample_SP100_returns_daily,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
opt_minvar = optimize.portfolio(sample_SP100_returns_daily,  portfolio = pspec, optimize_method = "ROI", trace = TRUE )
install.packages(foreach)
library(foreach)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
install.packages("fGarch")
install.packages("Rglpk")
install.packages("ROI.plugin.glpk")
install.packages("ROI.plugin.quadprog")
install.packages("ROI.plugin.symphony")
install.packages("pso")
install.packages("GenSA")
install.packages("corpcor")
install.packages("nloptr")
install.packages("robustbase")
library(PortfolioAnalytics)
library(DEoptim)
library(ROI)
library(foreach)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
